// ********RoostGPT********
/*
Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=
ROOST_METHOD_SIG_HASH=




*/

// ********RoostGPT********
using Xunit;
using Bunit;
using MyBlazorApp.Pages;

public class CounterComponentTests : TestContext
{
    [Fact(DisplayName = "CounterComponent - Renders Correctly on Initialization")]
    public void CounterComponentRendersCorrectlyOnInit()
    {
        // Arrange & Act
        var cut = RenderComponent<Counter>();

        // Assert
        cut.MarkupMatches("<PageTitle>Counter</PageTitle><h1>Counter</h1><p role=\"status\">Current count: 0</p><button class=\"btn btn-primary\">Click me</button>");
    }

    [Fact(DisplayName = "CounterComponent - IncrementCount Works Correctly")]
    public void CounterComponentIncrementCountWorksCorrectly()
    {
        // Arrange
        var cut = RenderComponent<Counter>();

        // Act
        cut.Find("button.btn.btn-primary").Click();

        // Assert
        Assert.Contains("Current count: 1", cut.Markup);
    }

    [Fact(DisplayName = "CounterComponent - Multiple Click Events Increment Count Correctly")]
    public void CounterComponentMultipleClickEventsIncrementCountCorrectly()
    {
        // Arrange
        var cut = RenderComponent<Counter>();
        var button = cut.Find("button.btn.btn-primary");

        // Act
        button.Click();
        button.Click();
        button.Click();

        // Assert
        Assert.Contains("Current count: 3", cut.Markup);
    }
}
