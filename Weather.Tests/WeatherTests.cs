// ********RoostGPT********
/*
Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=
ROOST_METHOD_SIG_HASH=




*/

// ********RoostGPT********
using Xunit;
using Bunit;
using Microsoft.Extensions.DependencyInjection;
using System.Net.Http;
using Microsoft.Extensions.Http;
using Moq;
using System.Text;
using System.Text.Json;
using System;

public class WeatherComponentTests : TestContext
{
    [Fact]
    public void WeatherComponentRendersCorrectly()
    {
        var httpMock = new Mock<HttpMessageHandler>();
        
        httpMock.Protected().Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>()).ReturnsAsync(new HttpResponseMessage()
        {
            StatusCode = HttpStatusCode.OK,
            Content = new StringContent(JsonSerializer.Serialize(new[] { new WeatherForecast { Date = DateTime.Today, TemperatureC = 20, Summary = "Sunny" } }), Encoding.UTF8, "application/json")
        });

        Services.AddHttpClient("ServerAPI", client => { }).ConfigurePrimaryHttpMessageHandler(() => httpMock.Object);
        Services.AddScoped(sp => sp.GetRequiredService<IHttpClientFactory>().CreateClient("ServerAPI"));

        var cut = RenderComponent<WeatherComponent>();

        cut.MarkupMatches("<h1>Weather</h1><p>This component demonstrates fetching data from the server.</p><table class=\"table\"><thead><tr><th>Date</th><th>Temp. (C)</th><th>Temp. (F)</th><th>Summary</th></tr></thead><tbody><tr><td>" + DateTime.Today.ToString("d") + "</td><td>20</td><td>68</td><td>Sunny</td></tr></tbody></table>");
    }
    
    [Fact]
    public void WeatherComponentRendersCorrectlyWhenLoading()
    {
        var cut = RenderComponent<WeatherComponent>();
                      
        cut.MarkupMatches("<h1>Weather</h1><p>This component demonstrates fetching data from the server.</p><p><em>Loading...</em></p>");
    }    
}
