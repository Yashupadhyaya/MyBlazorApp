// ********RoostGPT********
/*
Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test ui-testing using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=
ROOST_METHOD_SIG_HASH=




*/

// ********RoostGPT********
using Bunit;
using Bunit.Mocking;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.DependencyInjection;
using MyBlazorApp.Layout;
using Moq;
using Xunit;

public class MyComponentTest
{
    TestContext testContext;
    
    public MyComponentTest()
    {
        testContext = new TestContext();
        testContext.Services.AddSingleton(new HttpClient());
    }
    
    [Fact]
    public void MyComponentRendersCorrectly()
    {
        // Arrange
        var cut = testContext.RenderComponent<MyComponent>();

        // Act
        var markup = cut.Markup;

        // Assert
        Assert.Contains("<div class=\"my-component\">", markup);
    }

    [Fact]
    public void MyComponentHandlesEventsCorrectly()
    {
        // Arrange
        var cut = testContext.RenderComponent<MyComponent>();

        // Act
        cut.Find("button").Click();
        
        // Assert
        Assert.True(cut.Instance.IsClicked, "Button click not handled correctly");
    }

    [Fact]
    public void MyComponentDisplaysParameter()
    {
        // Arrange
        const string parameterValue = "Test";

        // Act
        var cut = testContext.RenderComponent<MyComponent>(parameters => parameters
          .Add(p => p.Parameter, parameterValue));

        // Assert
        var label = cut.Find("label");
        Assert.Equal(parameterValue, label.TextContent, "The component does not display the parameter correctly.");
    }

   [Fact]
   public void MyComponent_SetsEventCallback_WhenClicked()
   {
        // Arrange
        var callbackMock = new Mock<Action>();
        var cut = testContext.RenderComponent<MyComponent>(parameters => parameters
           .Add(p => p.OnClick, callbackMock.Object));

        // Act
        cut.Find("button").Click();

        // Assert
        callbackMock.Verify(callback => callback.Invoke(), Times.Once, "OnClick eventcallback not triggered when button is clicked.");
   }  

   public void Dispose()
   {
       testContext?.Dispose();
   } 
}
